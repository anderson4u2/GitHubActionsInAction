name: "My first workflow"

# triggers: webhook, scheduled or manual
on:
  push:
    branches:
      - "main"
  # workflow_dispatch:

  workflow_dispatch:
    inputs:
      homedrive:
        description: "The home drive on the machine"
        required: true
      logLevel:
        description: "Log level"
        default: "warning"
        type: choice
        options:
          - info
          - warning
          - debug
      tag:
        description: "Apply tag after successfull test run"
        required: true
        type: boolean
      environment:
        description: "Environment to run tests against"
        type: environment
        required: true

# will only trigger the workflow when files in the doc folder have changed, and
# the changes are pushed to the main branch or a branch starting with 'release/':
# on:
#   push:
#     branches:
#       - 'main'
#       - 'release/**'
#     paths:
#     - 'doc/**'

# There are many webhook triggers available—for example, you could run a work-
# flow on an issues event. Supported activity type filters are opened, edited, deleted,
# transferred, pinned, unpinned, closed, reopened, assigned, unassigned, labeled,
# unlabeled, locked, unlocked, milestoned, and demilestoned. Any of these events
# occurring in an issue will trigger the workflow to run.
# You can also run a workflow when your repository is starred (watch); a branch_
# protection_rule is created, edited, or deleted; or when your repository visibility is
# changed from private to public. For a complete list of the events that can trigger
# workflows, please refer to the documentation at: https:// mng.bz/WVr4.

# on:
#   schedule:
#     # Runs at every 15th minute
#     - cron: '*/15 * * * *'
#     # Runs every hour from 9am to 5pm
#     - cron: '0 9-17 * * *'
#     # Runs every Friday at midnight
#     - cron: '0 0 * * FRI'
#     # Runs every quarter (00:00 on day 1 every 3rd month)
#     - cron: '0 0 1 */3 *'

jobs:
  MyFirstJob:
    runs-on: ubuntu-latest

    steps:
      - run: echo "Hello World!"

      - name: Checkout
        uses: actions/checkout@v4.2.2

      - name: List files in the repository
        run: |
          echo "The repository ${{ github.repository }} contains the following files:"
          tree

      - run: |
          echo "Homedrive: ${{ inputs.homedrive }}"
          echo "Log level: ${{ inputs.logLevel }}"
          echo "Tag source: ${{ inputs.tag }}"
          echo "Environment ${{ inputs.environment }}"
        name: Workflow Inputs
        if: ${{ github.event_name == 'workflow_dispatch' }}

  job_2:
    runs-on: ubuntu-latest
    needs: MyFirstJob
    steps:
      - run: "echo Job: ${{ github.job }}"
  job_3:
    runs-on: ubuntu-latest
    needs: MyFirstJob
    steps:
      - run: "echo Job: ${{ github.job }}"
  job_4:
    runs-on: ubuntu-latest
    needs: [job_2, job_3]
    steps:
      - run: "echo Job: ${{ github.job }}"

  job_5:
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os_version: [macos-latest, ubuntu-latest]
        node_version: [20, 18, 16]
    name: My first matrix job
    runs-on: ${{ matrix.os_version }}
    steps:
      - uses: actions/setup-node@v3.6.0
        with:
          node-version: ${{ matrix.node_version }}

  deploy:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - run: echo "Deploying branch ${{ github.ref }}"

      # There are also some special functions to check the status of the current job. In the
      # following example, the step displayed would only be executed if a previous step of the
      # jobs has failed: failure(), always(), cancelled(), and failure().
      - name: The job has failed
        if: ${{ failure() }}
        run: echo "The job has failed!"

      # The syntax to pass output values to subsequent tasks is different. Instead of using a
      # workflow command with echo, you have to pipe a name–value pair to the environment
      # file $GITHUB_OUTPUT:
      # echo "{name}={value}" >> "$GITHUB_OUTPUT"
      # The operator >> appends the name–value pair to the end of the file. The path and
      # filename of the file are stored in the environment variable $GITHUB_OUTPUT. You can
      # access the output using the output property of the step in the steps context:
      - name: Set color
        id: color-generator
        run: echo "SELECTED_COLOR=green" >> "$GITHUB_OUTPUT"
      - name: Get color
        run: echo "${{ steps.color-generator.outputs.SELECTED_COLOR }}"

  # If you want to mask the output in the log, even when you pass the value to other steps
  # or jobs, you can use ::add-mask::{value}. This will mask the output in the log. The
  # value will be preserved—only the output is masked. You can find an example in the
  # following listing.
  generate-a-secret-output:
    runs-on: ubuntu-latest
    steps:
      - id: sets-a-secret
        name: Generate, mask, and output a secret
        run: |
          the_secret=$((RANDOM))
          echo "::add-mask::$the_secret"
          echo "secret-number=$the_secret" >> "$GITHUB_OUTPUT"
      - name: Use that secret output (protected by a mask)
        run: |
          echo "the secret number is ${{ steps.sets-a-secret.outputs.secret-number }}"

      # Another use case for environment files is setting an environment variable for subse-
      # quent steps in a job. The corresponding environment file is $GITHUB_ENV. And again,
      # you just append another name–value pair to the end of the file.
      # Note that the name is case sensitive! The following is a complete example of how to set
      # an environment variable in one step and access it in a subsequent step, using the env
      # context:
      - name: Set the value
        id: step_one
        run: |
          echo "action_state=yellow" >> "$GITHUB_ENV"
      - run: |
          echo "${{ env.action_state }}" # This will output 'yellow'
